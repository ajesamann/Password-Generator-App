{"version":3,"sources":["components/RandomPasswordGenerator.js","App.js","serviceWorker.js","index.js"],"names":["RandomPassword","state","randomList","randomPassword","showCopied","addSpec","value","generateNewPassword","specialCharArr","newArray","randSpecValue","Math","floor","random","length","i","randArrayValue","push","randLetter","indexOf","setState","join","toggle","e","setTimeout","toggleOn","slideInput","target","console","log","this","className","native","items","from","transform","enter","leave","show","props","div","style","type","min","max","onChange","id","onClick","text","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d0ba585.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { Transition, animated } from \"react-spring/renderprops\";\r\n\r\nclass RandomPassword extends Component {\r\n  state = {\r\n    randomList: [\r\n      \"A\",\r\n      \"B\",\r\n      \"C\",\r\n      \"D\",\r\n      \"E\",\r\n      \"F\",\r\n      \"G\",\r\n      \"H\",\r\n      \"I\",\r\n      \"J\",\r\n      \"K\",\r\n      \"L\",\r\n      \"M\",\r\n      \"N\",\r\n      \"O\",\r\n      \"P\",\r\n      \"Q\",\r\n      \"R\",\r\n      \"S\",\r\n      \"T\",\r\n      \"U\",\r\n      \"V\",\r\n      \"W\",\r\n      \"X\",\r\n      \"Y\",\r\n      \"Z\",\r\n      \"a\",\r\n      \"b\",\r\n      \"c\",\r\n      \"d\",\r\n      \"e\",\r\n      \"f\",\r\n      \"g\",\r\n      \"h\",\r\n      \"i\",\r\n      \"j\",\r\n      \"k\",\r\n      \"l\",\r\n      \"m\",\r\n      \"n\",\r\n      \"o\",\r\n      \"p\",\r\n      \"q\",\r\n      \"r\",\r\n      \"s\",\r\n      \"t\",\r\n      \"u\",\r\n      \"v\",\r\n      \"w\",\r\n      \"x\",\r\n      \"y\",\r\n      \"z\",\r\n      \"0\",\r\n      \"1\",\r\n      \"2\",\r\n      \"3\",\r\n      \"4\",\r\n      \"5\",\r\n      \"6\",\r\n      \"7\",\r\n      \"8\",\r\n      \"9\"\r\n    ],\r\n    randomPassword: \"\",\r\n    showCopied: false,\r\n    addSpec: false,\r\n    value: 8\r\n  };\r\n\r\n  generateNewPassword = () => {\r\n    var specialCharArr = [\r\n      \"!\",\r\n      \"#\",\r\n      \"$\",\r\n      \"&\",\r\n      \"?\",\r\n      \"%\",\r\n      \"^\",\r\n      \"@\",\r\n      \":\",\r\n      \"/\",\r\n      \">\",\r\n      \"-\",\r\n      \"_\",\r\n      \"*\"\r\n    ];\r\n    var newArray = [];\r\n    var randSpecValue =\r\n      specialCharArr[Math.floor(Math.random() * specialCharArr.length)];\r\n    for (var i = 0; i < this.state.value; i++) {\r\n      var randArrayValue = this.state.randomList[\r\n        Math.floor(Math.random() * this.state.randomList.length)\r\n      ];\r\n      if (i < this.state.value) {\r\n        newArray.push(randArrayValue);\r\n      }\r\n    }\r\n    if (this.state.addSpec) {\r\n      var randLetter = newArray[Math.floor(Math.random() * newArray.length)];\r\n      if (newArray.indexOf(randLetter) > -1) {\r\n        newArray[newArray.indexOf(randLetter)] = randSpecValue;\r\n      }\r\n    }\r\n    this.setState({ randomPassword: newArray.join(\"\") });\r\n  };\r\n\r\n  toggle = e => {\r\n    this.setState({ showCopied: !this.state.showCopied });\r\n    setTimeout(() => {\r\n      this.setState({ showCopied: !this.state.showCopied });\r\n    }, 3000);\r\n  };\r\n\r\n  toggleOn = e => {\r\n    this.setState({ addSpec: !this.state.addSpec });\r\n  };\r\n\r\n  slideInput = e => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.addSpec);\r\n    const { randomPassword } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <Transition\r\n          native\r\n          items={this.state.showCopied}\r\n          from={{ transform: \"translate3d(0, -200px, 0)\" }}\r\n          enter={{ transform: \"translate3d(0, -50px, 0)\" }}\r\n          leave={{ transform: \"translate3d(0, -200px, 0)\" }}\r\n        >\r\n          {show =>\r\n            show &&\r\n            (props => (\r\n              <animated.div style={props}>\r\n                <div className=\"copied\">Successfully copied to clipboard</div>\r\n              </animated.div>\r\n            ))\r\n          }\r\n        </Transition>\r\n        <div className=\"slidercon\">\r\n          <input\r\n            type=\"range\"\r\n            min={3}\r\n            max={13}\r\n            value={this.state.value}\r\n            className=\"slider\"\r\n            onChange={this.slideInput}\r\n          ></input>\r\n          <div className=\"inputvalue\">Password length: {this.state.value}</div>\r\n        </div>\r\n        <label className=\"specialcon\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"special\"\r\n            value=\"special\"\r\n            onClick={this.toggleOn}\r\n          ></input>\r\n          <span className=\"checkbox\"></span>\r\n          <span>Include a special character</span>\r\n        </label>\r\n        <CopyToClipboard text={randomPassword}>\r\n          <div className=\"password\" onClick={this.toggle}>\r\n            {randomPassword}\r\n          </div>\r\n        </CopyToClipboard>\r\n        <div className=\"clickhere\">Click your password to copy it!</div>\r\n        <button\r\n          className=\"generate-password\"\r\n          onClick={this.generateNewPassword}\r\n        >\r\n          Generate Password!\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RandomPassword;\r\n","import React from \"react\";\nimport RandomPassword from \"./components/RandomPasswordGenerator\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <RandomPassword />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}